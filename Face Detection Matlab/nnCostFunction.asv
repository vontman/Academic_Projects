function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   X, y, lambda)
                                   
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 1, (hidden_layer_size + 1));

m = size(X, 1);
         
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

z2 = [ones(m,1) X] * Theta1';
a2 = sigmoid(z2);
z3 = [ones(m,1) a2] * Theta2';
a3 = sigmoid(z3);

reg_part = (lambda/2/m)*(sum(sum(Theta1(:,2:(input_layer_size + 1)).^2)) + sum(sum(Theta2(:,2: (hidden_layer_size + 1)).^2)));
J = (-1/m) * sum(sum(y.*log(a3) + (1-y).*log(1-a3) )) + reg_part;


s3 = a3-y;
s2 = s3*Theta2.*[ones(size(z2,1),1) sigmoidGradient(z2)];

Theta1_grad = s2(:,2:end)'*[ones(size(X,1), 1) X]/m;
Theta1_grad(:,2:end) = Theta1_grad(:,2:end) + (lambda/m)*Theta1(:,2:(input_layer_size + 1));
Theta2_grad = s3'*[ones(size(a2,1),1) a2]/m ;
Theta2_grad(:,2:end) = Theta2_grad(:,2:end) + (lambda/m)*Theta2(:,2:(hidden_layer_size + 1));

grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
